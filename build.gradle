plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id "net.neoforged.gradleutils" version "3.0.0-alpha.13"
    id 'com.gradle.plugin-publish' version '1.1.0'
    id 'io.github.goooler.shadow' version '8.1.7'
}

group = 'net.neoforged'
base {
    archivesName = "moddev-gradle"
}
gradleutils.version {
    branches.suffixBranch()
}
project.version = gradleutils.version

changelog {
    from '0.1'
    // For fine-grained changelog publication control
    disableAutomaticPublicationRegistration()
}

if (System.getenv('GPP_KEY')) {
    project.ext {
        set('gradle.publish.key', System.getenv('GPP_KEY'))
        set('gradle.publish.secret', System.getenv('GPP_SECRET'))
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Fabric"
                url = "https://maven.fabricmc.net/"
            }
        }
        filter {
            includeModule("net.fabricmc", "fabric-loom-native")
        }
    }
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases"
        content {
            includeGroup "net.neoforged"
        }
    }
    mavenCentral()
    gradlePluginPortal()
}

sourceSets {
    java8
    main {
        compileClasspath += java8.output
        runtimeClasspath += java8.output
    }
}

configurations {
    // Configuration for all dependencies that we want shaded.
    shaded
    // Place shaded dependencies into `compileOnly` so that they do not leak into our publications' dependencies.
    compileOnly.extendsFrom shaded
    shadowRuntimeElements {
        // `shadowRuntimeElements` is what gets published.
        // We want it to contain the non-shaded runtime dependencies.
        it.extendsFrom implementation, runtimeOnly
    }
    // Change the Category attribute so that includeBuilds don't select the default `runtimeElements` configuration.
    // The Plugin Publish plugin already disables Maven publication of this configuration automatically.
    runtimeElements {
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "not-wanted-publication"))
        }
    }
}

dependencies {
    compileOnly gradleApi()
    compileOnly "com.intellij:annotations:9.0.4"
    shaded "com.google.code.gson:gson:2.10.1"
    implementation "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.8"
    implementation "net.neoforged:EclipseLaunchConfigs:0.1.11"
    implementation "net.neoforged:JarJarMetadata:0.4.1"

    java8CompileOnly gradleApi()

    testImplementation(enforcedPlatform("org.junit:junit-bom:5.10.2"))
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.assertj:assertj-core:3.25.1'
    testImplementation gradleTestKit()
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

jar {
    from sourceSets.java8.output
}

shadowJar {
    archiveClassifier = "" // Required for the Plugin Publish Plugin to publish this jar

    from sourceSets.java8.output

    configurations = [project.configurations.shaded]
    enableRelocation true
    relocationPrefix = "net.neoforged.moddev.shadow"
}

assemble.dependsOn shadowJar

tasks.named("compileJava8Java").configure {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

// This is a shameless ripoff from Fabric Loom:
// https://github.com/FabricMC/fabric-loom/blob/dev/1.6/build.gradle
// Need to tweak this file to pretend we are compatible with j8 so the bootstrap will run.
tasks.withType(GenerateModuleMetadata) {
    doLast {
        def file = outputFile.get().asFile

        def metadata = new groovy.json.JsonSlurper().parseText(file.text)

        metadata.variants.each {
            it.attributes["org.gradle.jvm.version"] = 8
        }

        file.text = groovy.json.JsonOutput.toJson(metadata)
    }
}

gradlePlugin {
    website = 'https://github.com/neoforged/ModDevGradle'
    vcsUrl  = 'https://github.com/neoforged/ModDevGradle.git'

    plugins {
        moddev {
            id = 'net.neoforged.moddev'
            implementationClass = 'net.neoforged.moddevgradle.boot.ModDevPlugin'
            displayName = "NeoForge Mod Development Plugin"
            description = "This plugin helps you create Minecraft mods using the NeoForge platform"
            tags = ["minecraft", "neoforge", "java", "mod"]
        }
    }
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'NeoForge'
            if (System.getenv('MAVEN_USER') && System.getenv('MAVEN_PASSWORD')) {
                it.url = "https://maven.neoforged.net/releases/"
                it.authentication {
                    it.create('basic', BasicAuthentication)
                }
                it.credentials { credentials ->
                    credentials.username = System.getenv('MAVEN_USER')
                    credentials.password = System.getenv('MAVEN_PASSWORD')
                }
            } else {
                it.url = 'file://' + file("repo").getAbsolutePath()
            }
        }
    }
}

// The java-gradle-plugin ignores the java8 source-set we added to the main source sets classpath
// For testkit tests to work, this needs to be present
tasks.withType(PluginUnderTestMetadata).configureEach {
    it.pluginClasspath.from(sourceSets.java8.output.classesDirs)
}
